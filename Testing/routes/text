const express = require('express');
const mongoose = require('mongoose');
const session = require('express-session');
const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;
const User = require('./model/User');
const authRoutes = require('./routes/auth');
const connectDB = require('./config/db')
const app = express();
const PORT = process.env.PORT || 5000;
connectDB();

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(session({
  secret: 'secretkey', // Change this to a more secure key in production
  resave: false,
  saveUninitialized: false
}));

// Initialize Passport
app.use(passport.initialize());
app.use(passport.session());

// Passport Local Strategy
// passport.use(new LocalStrategy(
//   function(username, password, done) {
//     User.findOne({ username: username }, function(err, user) {
//       if (err) return done(err);
//       if (!user) return done(null, false);
//       user.comparePassword(password, function(err, isMatch) {
//         if (err) return done(err);
//         if (isMatch) return done(null, user);
//         else return done(null, false);
//       });
//     });
//   }
// ));

passport.use(new LocalStrategy(
    async (username, password, done) => {
      try {
        const user = await User.findOne({ username });
        if (!user) {
          return done(null, false, { message: 'Incorrect username.' });
        }
        // Compare the password
        const isMatch = await user.comparePassword(password);
        // const isMatch = ( user.password === password ? true : false);
  
        if (isMatch) {
          return done(null, user);
        } else {
          return done(null, false, { message: 'Incorrect password.' });
        }
      } catch (err) {
        return done(err);
      }
    }
  ));
// Serialize and deserialize user
passport.serializeUser(function(user, done) {
  done(null, user.id);
});

passport.deserializeUser(function(id, done) {
  User.findById(id, function(err, user) {
    done(err, user);
  });
});


// Routes
app.use('/auth', authRoutes);
// app.get('/login', passport.authenticate('local', {
//   successRedirect: '/auth/profile',
//   failureRedirect: '/auth/login',
//   failureFlash: true
// }));
app.post('/login', (req, res, next) => {
  passport.authenticate('local', (err, user, info) => {
    if (err) {
      return res.status(500).json({ msg: 'Server error', error: err });
    }
    if (!user) {
      return res.status(401).json({ msg: 'Login failed', error: info.message });
    }

    // Log in the user and return success message
    req.logIn(user, (err) => {
      if (err) {
        return res.status(500).json({ msg: 'Server error', error: err });
      }
      return res.status(200).json({ msg: 'Login successful', user });
    });
  })(req, res, next);
});



app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
